import { Scene, SceneEnter } from 'nestjs-telegraf';
import { Inject } from '@nestjs/common';
import { WorkService } from './work.service';
import { SceneRoles } from '../../../bot/decorators/scene-roles.decorator';
import { SCENES } from '../../../shared/scenes-wizards';
import { UserService } from '../../user/user.service';
import { CtxAuth } from '../../../bot/decorators/ctx-auth.decorator';
import { SceneAuthContext } from '../../../shared/interfaces';
import { sendMessage, sendMessages } from '../../../shared/senMessages';
import { Work } from './work.entity';

@Scene(SCENES.WORK_LIST)
@SceneRoles('manager', 'master')
export class WorkListScene {
  constructor(
    @Inject(WorkService)
    private readonly workService: WorkService,
    @Inject(UserService)
    private readonly userService: UserService,
  ) {}

  @SceneEnter()
  async onSceneEnter(@CtxAuth() ctx: SceneAuthContext): Promise<void> {
    const user = await this.userService.findByTelegramId(ctx.from.id);
    const userRole = ctx.userRole;

    const usersToShow =
      userRole === 'manager'
        ? (await this.userService.findAll()).filter(
            (user) => !!user.master.length,
          )
        : [user];

    for (const user of usersToShow) {
      if (userRole === 'manager') {
        const earnings = await this.workService.calculateEarnings(user.id);

        await sendMessage(
          ctx,
          `üôçüèª‚Äç‚ôÇÔ∏è –ú–∞—Å—Ç–µ—Ä: ${user.name}. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${user.master[0].paymentCoefficient}\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:\n–ù–∞—á–∏—Å–ª–µ–Ω–æ: ${earnings.totalEarned.toFixed(2)}‚ÇΩ\n–í—ã–ø–ª–∞—á–µ–Ω–æ: ${earnings.alreadyPaid.toFixed(2)}‚ÇΩ\n–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–ª–∞—Ç–∏—Ç—å: ${earnings.toPay.toFixed(2)}‚ÇΩ`,
        );
      }

      const works = await this.workService.findAllByUserId(user.id);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—ã –ø–æ –¥–∞—Ç–µ
      const worksByDate: { [key: string]: Work[] } = works.reduce(
        (acc, work) => {
          const dateKey = new Date(work.date).toISOString().split('T')[0];
          if (!acc[dateKey]) {
            acc[dateKey] = [];
          }
          acc[dateKey].push(work);
          return acc;
        },
        {} as { [key: string]: Work[] },
      );

      const workList = Object.entries(worksByDate).map(([date, dateWorks]) => {
        let output = `üìÖ –î–∞—Ç–∞: ${date}\n`;
        let totalCost = 0;

        dateWorks.forEach((work, index) => {
          const workCost = work.cost * work.count * work.paymentCoefficient;
          totalCost += workCost;

          output += `\n${index + 1}. ${work.task.shownName} (#${work.id})\n`;
          output += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${work.count}\n`;
          output += `   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${workCost.toFixed(2)}‚ÇΩ (${work.cost * work.paymentCoefficient}‚ÇΩ –∑–∞ –µ–¥.`;
          if (userRole === 'manager') {
            output += `, –∫: ${work.paymentCoefficient}`;
          }
          output += ')\n';

          if (work.standProd) {
            output += '   # –ò–∑–¥–µ–ª–∏—è / # –∑–∞–∫–∞–∑–∞ (–Ω–∞ –Ω–∞–∫–ª–µ–π–∫—É):\n';
            const { standProd } = work;
            const { standOrder } = standProd;
            const order = standOrder?.order;

            output += `   üìù ${standProd.id} / ${!standOrder ? '-' : standOrder.id + ':\n      ' + standOrder.format(userRole, 'line')}\n`;
            output += order
              ? `      –ó–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞ #${order.id}\n`
              : '–ó–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞: -\n';
          }
        });

        output += `\n–ò—Ç–æ–≥–æ –∑–∞ ${date}: ${totalCost.toFixed(2)}‚ÇΩ\n`;
        return output;
      });

      await sendMessages(ctx, workList);
    }

    await ctx.scene.leave();
    await ctx.scene.enter(SCENES.MENU);
  }
}
