import { getMessageText } from '../../../../shared/helpers';
import { replyWithCancelButton } from '../../../../bot/wizard-step-handler/utils';
import {
  setFieldValue,
  WizardStepCustomHandlerType,
  wizardStepHandler,
} from '../../../../bot/wizard-step-handler-new';
import { Master } from '../../../master/master.entity';
import {
  WizardHandlerConfig,
  WizardStep,
} from '../../../../bot/wizard-step-handler-new/types';
import {
  getFieldValue,
  getWizardSteps,
} from '../../../../bot/wizard-step-handler-new/wizard-handler';
import { Task } from '../../task/task.entity';
import { StandProd } from '../../../parts/stand-prod/stand-prod.entity';
import { Work } from '../work.entity';
import { CurrentData, CurrentWizard, CurrentWizardContext } from './types';
import { taskHandler } from './taskHandler';
import { partOutHandler } from './partOutHandler';
import { standProdHandler } from './standProdHandler';
import { sendMessage } from '../../../../shared/sendMessages';
import { partOutCountHandler } from './partOutCountHandler';
import { Component } from '../../../parts/component/component.entity';
import { z } from 'zod';
import { PartOut } from '../../../parts/part-out/part-out.entity';

const steps: WizardStep<CurrentData, CurrentWizard>[] = [
  {
    message: '‚ú® –°—Ç–∞–Ω–æ–∫ - –Ω–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è',
    handler: standProdHandler,
  },
  {
    message: 'üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
    field: 'date',
    type: 'date',
    required: true,
  },
  { message: '‚úÖ –ó–∞–¥–∞—á–∞', handler: taskHandler },
  {
    message: 'üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç)',
    field: 'workCount',
    type: 'number',
    required: true,
  },
  {
    message: '‚úçÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏—è\n–î–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–¥–µ–ª–∞–Ω–æ',
    field: 'description',
    type: 'string',
  },
];

export const partOutSteps: WizardStep<CurrentData, CurrentWizard>[] = [
  {
    message: 'üìã –†–∞—Å—Ö–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö',
    handler: partOutHandler,
    required: false,
  },
  {
    message: 'üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö (—à—Ç)',
    handler: partOutCountHandler,
    required: false,
  },
];

async function masterHandler(
  wizard: CurrentWizard,
  ctx: CurrentWizardContext,
  type: WizardStepCustomHandlerType,
) {
  if (type === 'request') {
    const masterList = await wizard.masterService.getList();
    await replyWithCancelButton(ctx, masterList);
    return true;
  }

  const message = getMessageText(ctx);

  const selectedNumber = parseInt(message);
  if (Number.isNaN(selectedNumber)) {
    await replyWithCancelButton(ctx, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.');
    return false;
  }

  const masters = await wizard.masterService.findAll();
  const master = masters[selectedNumber - 1];
  if (!master) {
    await replyWithCancelButton(ctx, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.');
    return false;
  }

  setFieldValue(ctx, 'master', master);
  return true;
}

const beforeFirstStep: NonNullable<
  WizardHandlerConfig<CurrentData, CurrentWizard>['beforeFirstStep']
> = async (wizard, ctx) => {
  if (ctx.session.userRole === 'manager') {
    getWizardSteps(ctx).splice(0, 0, {
      message: '–ú–∞—Å—Ç–µ—Ä',
      handler: masterHandler,
    });
    return;
  }

  const master = await wizard.masterService.getMasterByTelegramId(ctx.from.id);
  setFieldValue(ctx, 'master', master);
};

const WorkSchema = z.object({
  task: z.instanceof(Task, { message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏' }),
  master: z.instanceof(Master, { message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –º–∞—Å—Ç–µ—Ä–∞' }),
  standProd: z.instanceof(StandProd, { message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–µ–Ω–¥–∞' }),
  date: z.instanceof(Date, { message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞' }),
  cost: z.number({ invalid_type_error: '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º' }),
  count: z.number({ invalid_type_error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º' }),
  paymentCoefficient: z.number({
    invalid_type_error: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º',
  }),
  description: z
    .string({ invalid_type_error: '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º' })
    .optional(),
});

const afterLastStep: NonNullable<
  WizardHandlerConfig<CurrentData, CurrentWizard>['afterLastStep']
> = async (wizard, ctx) => {
  const result = WorkSchema.safeParse({
    task: getFieldValue(ctx, 'task'),
    standProd: getFieldValue(ctx, 'standProd'),
    master: getFieldValue(ctx, 'master'),
    paymentCoefficient: getFieldValue(ctx, 'paymentCoefficient'),
    date: getFieldValue(ctx, 'date'),
    count: getFieldValue(ctx, 'workCount'),
    cost: getFieldValue(ctx, 'savedCost'),
    description: getFieldValue(ctx, 'description'),
  });

  if (!result.success) {
    const errors = result.error.issues
      .map((issue) => `–ü–æ–ª–µ '${issue.path.join('.')}': ${issue.message}`)
      .join('\n');

    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:\n${errors}`);
    return;
  }
  const workEntity = new Work(result.data);

  const work = await wizard.service.create(workEntity);

  let partsOut: PartOut[];

  const componentValue = getFieldValue(ctx, 'component');
  const componentValueParsed = z
    .instanceof(Component)
    .safeParse(componentValue);
  const isWithComponentsValue = !!componentValueParsed.success;

  if (isWithComponentsValue) {
    const component = componentValueParsed.data;

    const partOutCountValue = getFieldValue(ctx, 'partOutCount');
    const partOutCountValueParsed = z.number().safeParse(partOutCountValue);
    if (!partOutCountValueParsed.success) {
      await ctx.reply('–û—à–∏–±–∫–∞. partOutCountValue –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    const partOutCount = partOutCountValueParsed.data;

    try {
      partsOut = await wizard.partsService.writeOffComponents(
        component.id,
        partOutCount,
        workEntity.date,
        workEntity.standProd,
        work,
      );
      await sendMessage(
        ctx,
        `–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ ${partOutCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å ${partsOut.length} –ø–∞—Ä—Ç–∏–π.`,
      );
    } catch (error) {
      await replyWithCancelButton(ctx, `–û—à–∏–±–∫–∞: ${error.message}`);
      return;
    }
  }

  const managers = await wizard.userService.findManagers();
  const currentUser = await wizard.userService.findByTelegramId(ctx.from.id);

  for (const manager of managers) {
    await wizard.bot.telegram.sendMessage(
      manager.telegramUserId,
      `${currentUser.name} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç—á—ë—Ç:\n${work.format('manager')}\n\n–°—Ç–∞–Ω–æ–∫:\n${work.standProd.format('manager')}\n\n${partsOut?.length ? `–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ:\n${partsOut.map((partOut) => partOut.format('manager'))}` : ''}`,
    );
  }
};

export const WorkAddWizardHandler = wizardStepHandler<
  CurrentData,
  CurrentWizard
>({
  beforeFirstStep,
  initialSteps: steps,
  afterLastStep,
});
