import { getMessageText } from '../../../../shared/helpers';
import { replyWithCancelButton } from '../../../../bot/wizard-step-handler/utils';
import {
  setFieldValue,
  WizardStepCustomHandlerType,
  wizardStepHandler,
} from '../../../../bot/wizard-step-handler-new';
import { Master } from '../../../master/master.entity';
import {
  WizardHandlerConfig,
  WizardStep,
} from '../../../../bot/wizard-step-handler-new/types';
import {
  getFieldValue,
  getWizardSteps,
} from '../../../../bot/wizard-step-handler-new/wizard-handler';
import { Task } from '../../task/task.entity';
import { StandProd } from '../../../parts/stand-prod/stand-prod.entity';
import { Work } from '../work.entity';
import { CurrentData, CurrentWizard, CurrentWizardContext } from './types';
import { taskHandler } from './taskHandler';
import { standProdHandler } from './standProdHandler';
import { sendMessage } from '../../../../shared/sendMessages';
import { Component } from '../../../parts/component/component.entity';
import { z } from 'zod';
import { PartOut } from '../../../parts/part-out/part-out.entity';
import { unifiedPartOutHandler } from './unifiedPartOutHandler';

const steps: WizardStep<CurrentData, CurrentWizard>[] = [
  {
    message: '‚ú® –°—Ç–∞–Ω–æ–∫ - –Ω–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è',
    handler: standProdHandler,
    required: true,
  },
  {
    message: 'üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
    field: 'date',
    type: 'date',
    required: true,
  },
  { message: '‚úÖ –ó–∞–¥–∞—á–∞', handler: taskHandler },
  {
    message: 'üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∑–∞–¥–∞—á–∏ (—à—Ç)',
    field: 'workCount',
    type: 'number',
    required: true,
  },
  {
    message: '‚úçÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏—è\n–î–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–¥–µ–ª–∞–Ω–æ',
    field: 'description',
    type: 'string',
  },
];

export const partOutSteps: WizardStep<CurrentData, CurrentWizard>[] = [
  {
    message:
      'üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —É–∫–∞–∂–∏—Ç–µ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
      '–Ω–æ–º–µ—Ä-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–æ–º–µ—Ä-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: 1-2, 3-5, 4-2',
    handler: unifiedPartOutHandler,
    required: false,
  },
];

async function masterHandler(
  wizard: CurrentWizard,
  ctx: CurrentWizardContext,
  type: WizardStepCustomHandlerType,
) {
  if (type === 'request') {
    const masterList = await wizard.masterService.getList();
    await replyWithCancelButton(ctx, masterList);
    return true;
  }

  const message = getMessageText(ctx);

  const selectedNumber = parseInt(message);
  if (Number.isNaN(selectedNumber)) {
    await replyWithCancelButton(ctx, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.');
    return false;
  }

  const masters = await wizard.masterService.findAll();
  const master = masters[selectedNumber - 1];
  if (!master) {
    await replyWithCancelButton(ctx, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.');
    return false;
  }

  setFieldValue(ctx, 'master', master);
  return true;
}

const beforeFirstStep: NonNullable<
  WizardHandlerConfig<CurrentData, CurrentWizard>['beforeFirstStep']
> = async (wizard, ctx) => {
  if (ctx.session.userRole === 'manager') {
    getWizardSteps(ctx).splice(0, 0, {
      message: '–ú–∞—Å—Ç–µ—Ä',
      handler: masterHandler,
    });
    return;
  }

  const master = await wizard.masterService.getMasterByTelegramId(ctx.from.id);
  setFieldValue(ctx, 'master', master);
};

const WorkSchema = z.object({
  task: z.instanceof(Task, { message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø task' }),
  master: z.instanceof(Master, { message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø master' }),
  standProd: z.instanceof(StandProd, {
    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø standProd',
  }),
  date: z.instanceof(Date, { message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞' }),
  cost: z.number({ invalid_type_error: '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º' }),
  count: z.number({ invalid_type_error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º' }),
  paymentCoefficient: z.number({
    invalid_type_error: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º',
  }),
  description: z
    .string({ invalid_type_error: '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º' })
    .optional(),
});

const afterLastStep: NonNullable<
  WizardHandlerConfig<CurrentData, CurrentWizard>['afterLastStep']
> = async (wizard, ctx) => {
  // Validate the core work data using Zod schema
  const result = WorkSchema.safeParse({
    task: getFieldValue(ctx, 'task'),
    standProd: getFieldValue(ctx, 'standProd'),
    master: getFieldValue(ctx, 'master'),
    paymentCoefficient: getFieldValue(ctx, 'paymentCoefficient'),
    date: getFieldValue(ctx, 'date'),
    count: getFieldValue(ctx, 'workCount'),
    cost: getFieldValue(ctx, 'savedCost'),
    description: getFieldValue(ctx, 'description'),
  });

  if (!result.success) {
    const errors = result.error.issues
      .map((issue) => `–ü–æ–ª–µ '${issue.path.join('.')}': ${issue.message}`)
      .join('\n');
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:\n${errors}`);
    return;
  }

  // Create and save the work entity
  const workEntity = new Work(result.data);
  const work = await wizard.service.create(workEntity);

  // Handle component selections and parts out
  const componentSelectionsValue = getFieldValue(ctx, 'componentSelections');

  let allPartsOut: PartOut[] = [];

  if (componentSelectionsValue !== undefined) {
    const ComponentSelectionsSchema = z.array(
      z.object({
        component: z.instanceof(Component),
        count: z.number().positive(),
      }),
    );

    const componentSelectionsResult = ComponentSelectionsSchema.safeParse(
      componentSelectionsValue,
    );

    if (!componentSelectionsResult.success) {
      await ctx.reply('–û—à–∏–±–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
      return;
    }

    const componentSelections = componentSelectionsResult.data;

    if (componentSelections.length) {
      try {
        // Process each component selection
        for (const selection of componentSelections) {
          const partsOut = await wizard.partsService.writeOffComponents(
            selection.component.id,
            selection.count,
            workEntity.date,
            workEntity.standProd,
            work,
          );
          allPartsOut = allPartsOut.concat(partsOut);
        }

        // Summarize the component write-offs
        const summary = componentSelections
          .map(
            (selection) =>
              `${selection.component.name}: ${selection.count}—à—Ç —Å ${
                allPartsOut.filter(
                  (p) => p.partIn.component.id === selection.component.id,
                ).length
              } –ø–∞—Ä—Ç–∏–π`,
          )
          .join('\n');

        await sendMessage(ctx, `–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n${summary}`);
      } catch (error) {
        await replyWithCancelButton(
          ctx,
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${error.message}`,
        );
        return;
      }
    }
  }

  // Notify managers about the new work report
  const managers = await wizard.userService.findManagers();
  const currentUser = await wizard.userService.findByTelegramId(ctx.from.id);

  // Format the notification message
  const notificationMessage = [
    `${currentUser.name} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç—á—ë—Ç:`,
    work.format('manager'),
    '\n–°—Ç–∞–Ω–æ–∫:',
    work.standProd.format('manager'),
  ];

  // Add components information if any were used
  if (allPartsOut.length) {
    notificationMessage.push(
      '\n–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ:',
      allPartsOut.map((partOut) => partOut.format('manager')).join('\n'),
    );
  }

  // Send notifications to all managers
  for (const manager of managers) {
    await wizard.bot.telegram.sendMessage(
      manager.telegramUserId,
      notificationMessage.join('\n'),
    );
  }
};

export const WorkAddWizardHandler = wizardStepHandler<
  CurrentData,
  CurrentWizard
>({
  beforeFirstStep,
  initialSteps: steps,
  afterLastStep,
});
